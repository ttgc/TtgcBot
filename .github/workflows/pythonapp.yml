name: Python application

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
        token: ${{ secrets.API_ACCESS_TOKEN }}

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Postgresql
      run: |
        sudo apt-get update
        sudo apt-get install -qy postgresql postgresql-server-dev-10 sudo
        sudo service postgresql start

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install -r Cosmo-Network/API/Tools/requirements.pip
        pip3 install -r requirements.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

#    - name: Test with pytest
#      run: |
#        pip install pytest
#        pytest
    
    - name: Setup databases
      env:
        DBPWD: ${{ secrets.localdb_password }}
      run: | 
        Cosmo-Network/API/Tools/createdb/installdb.sh --api=ttgcapi --bot=ttgcbot --pwd=$DBPWD --generate-prod -c -u
        Cosmo-Network/API/Tools/populatedb/populate.sh --bot=ttgcbot --no-test

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
      env:
        ASPNETCORE_ENVIRONMENT: Production

    - name: Build API
      run: Cosmo-Network/API/Tools/deploy.sh --gmk --aspenv-prod --https
      env:
        ASPNETCORE_ENVIRONMENT: Production
    
    - name: Setup API environment
      env:
        API_REGISTERAPP_PWD: ${{ secrets.API_REGISTERAPP_PWD }}
        API_REGISTERAPP_SALT: ${{ secrets.API_REGISTERAPP_SALT }}
        DBPWD: ${{ secrets.localdb_password }}
      run: |
        cd Cosmo-Network/API
        echo "{\"apiurl\": \"https://localhost:5001\", \"register_test\": \"ttgcbotapp.json\", \"register_app\": {\"pwd\": \""$API_REGISTERAPP_PWD"\", \"timestamp\": \"05-10-2020-20-12-35\", \"salt\": "$API_REGISTERAPP_SALT"}}" > Tools/toolsProperties.json
        sleep 10
        Tools/populatedb/populate.sh --api=ttgcapi --scan=dynamic --pwd=$DBPWD
        python3 "Tools/API Register/register.py"
        python3 Tools/populatedb/scannode.py ttgcbot ttgcapi $(id -u -n) $DBPWD
        cd ../..

    # - name: Install PostgreSQL
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -qy postgresql postgresql-server-dev-10 sudo
    #     sudo service postgresql start
    #
    # - name: Setup database
    #   env:
    #     dbpwd: ${{ secrets.localdb_password }}
    #   run: |
    #     user=$(id -u -n)
    #     sudo -u postgres psql -v ON_ERROR_STOP=1 -c "CREATE DATABASE ttgcbot"
    #     sudo -u postgres psql -v ON_ERROR_STOP=1 -c "CREATE USER "$user" ENCRYPTED PASSWORD '"$dbpwd"';"
    #     sudo -u postgres psql -v ON_ERROR_STOP=1 -c "GRANT ALL PRIVILEGES ON DATABASE ttgcbot TO "$user";"
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/tables.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/triggers.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/procedures.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/lang_features.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/userblock_features.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/pet.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/skill_and_kill_features.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/map.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/swap.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/jdr_rewrite.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/jdr_v4.sql
    #     psql -v ON_ERROR_STOP=1 -p 5432 -d ttgcbot -f database-scripts/jdr_v5.sql
    # 
    # - name: Create config file
    #   env:
    #     token: ${{ secrets.token }}
    #     dbpwd: ${{ secrets.localdb_password }}
    #   run: |
    #     echo '{"token": "'$token'", "database": {"name": "ttgcbot", "user": "'$(id -u -n)'", "password": "'$dbpwd'"}}' > config/config.staging.json
    #
    # - name: Launch application
    #   run: |
    #     timeout --preserve-status -s SIGINT --kill-after=30 60 python3 TtgcBot.py staging

    - name: Unregister bot app
      run: |
        cd Cosmo-Network/API
        python3 "Tools/API Register/unregister.py"
        cd ../..

    - name: Approve pull request
      if: github.event_name == 'pull_request'
      uses: andrewmusgrave/automatic-pull-request-review@0.0.2
      with:
        repo-token: '${{ secrets.GITHUB_TOKEN }}'
    
    - name: Dump databases and gather artifacts
      if: ${{ failure() }}
      run: |
        mkdir output
        pg_dump ttgcbot > output/dump_bot.sql
        pg_dump ttgcapi > output/dump_api.sql
        cp Cosmo-Network/API/Tools/toolsProperties.json output/toolsProperties.json
        cp Cosmo-Network/API/Tools/ttgcbotapp.json output/ttgcbotapp.json
        cp Cosmo-Network/API/API/Properties/launchSettings.json output/launchSettings.json
        cp Cosmo-Network/API/API/appsettings.Production.json output/appsettings.Production.json
    
    - name: Upload artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2.1.4
      with:
        name: artifacts
        path: output/
        if-no-files-found: warn
