# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:

    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.1
      - image: circleci/postgres:9.6.5-alpine-ram

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r requirements.txt

      - run:
          name: install postgres
          command: |
            sudo apt-get install postgresql

      # - run:
      #     name: temp
      #     command: |
      #      sudo apt-get autoremove --purge
      #      sudo apt-get autoclean
      #      sudo apt-get update
      #      sudo apt-get install postgresql-client

      - run:
          name: deploy database
          command: |
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/tables.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/triggers.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/procedures.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/lang_features.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/userblock_features.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/skill_and_kill_features.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/map.sql
            psql -p 5432 -d postgresql://root@localhost/circle_test -f database-scripts/swap.sql

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: write config
          command: |
            echo '[TOKEN]' > token.ini
            echo 'Bot='$token >> token.ini
            echo '' >> token.ini
            echo '[DATABASE]' >> token.ini
            echo 'name=circle_test' >> token.ini
            echo 'IP=localhost' >> token.ini
            echo 'port=5432' >> token.ini
            echo 'user=root' >> token.ini
            echo 'pwd=' >> token.ini

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            timeout --preserve-status -s SIGINT --kill-after=30 60 python3 TtgcBot.py --no-fontcheck --no-vocal

      - store_artifacts:
          path: test-reports
          destination: test-reports
